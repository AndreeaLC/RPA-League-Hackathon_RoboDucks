<Activity mc:Ignorable="sap sap2010 sads" x:Class="GetSupplyDemand"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="out_dict" Type="OutArgument(scg:Dictionary(x:String, x:String))" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>GetSupplyDemand_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Plugin.Workflow</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Interactive.Async</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="It scrapes the supply table by using indices to parse the table and create a dictionary with keys/values from the table.&#xD;&#xA;&#xD;&#xA;Prerequisites : RPAChallenge Tab has to be open&#xD;&#xA;Post Action : The first dictionary (partially keys in standard form, those that were not recognized or that did not fulfill any conditions, were marked as unknown)&#xD;&#xA;" DisplayName="GetSupplyDemand" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="idex" />
      <Variable x:TypeArguments="x:String" Name="valueName" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:String)" Default="[new Dictionary(of String, String)]" Name="dictValues" />
      <Variable x:TypeArguments="x:String" Name="keyName" />
      <Variable x:TypeArguments="ui:GenericValue" Name="supplierName" />
      <Variable x:TypeArguments="x:Double" Default="1" Name="scale" />
      <Variable x:TypeArguments="x:Boolean" Name="foundElement" />
      <Variable x:TypeArguments="x:String" Name="finalKey" />
      <Variable x:TypeArguments="x:Boolean" Name="_pgdn" />
    </Sequence.Variables>
    <Assign DisplayName="Assign index starting point -&gt; 3" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Int32">[idex]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Int32">3</InArgument>
      </Assign.Value>
    </Assign>
    <ui:GetValue ContinueOnError="{x:Null}" DisplayName="Get Supplier Name" sap2010:WorkflowViewState.IdRef="GetValue_2">
      <ui:GetValue.Target>
        <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" TimeoutMS="{x:Null}" InformativeScreenshot="0ed3415213ede1ff3ab20aa32441c595" Selector="&lt;html title='Automation Challenge' /&gt;&lt;webctrl id='supply_table' tag='TABLE' /&gt;&lt;webctrl idx='1' tableCol='2' tag='TD' /&gt;" WaitForReady="INTERACTIVE" />
      </ui:GetValue.Target>
      <ui:GetValue.Value>
        <OutArgument x:TypeArguments="ui:GenericValue">[supplierName]</OutArgument>
      </ui:GetValue.Value>
    </ui:GetValue>
    <Assign DisplayName="Add SupplierName in dictionary" sap2010:WorkflowViewState.IdRef="Assign_6">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[dictValues("name")]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[supplierName]</InArgument>
      </Assign.Value>
    </Assign>
    <While DisplayName="While index is lower than 8" sap2010:WorkflowViewState.IdRef="While_1" Condition="[idex &lt; 8]">
      <Sequence sap2010:WorkflowViewState.IdRef="Sequence_3">
        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_1">
          <Assign DisplayName="Initialize FoundElement with False" sap2010:WorkflowViewState.IdRef="Assign_10">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Boolean">[foundElement]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Pgdn has not been pressed (False)" sap2010:WorkflowViewState.IdRef="Assign_13">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Boolean">[_pgdn]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
            </Assign.Value>
          </Assign>
          <While DisplayName="While the element is not found" sap2010:WorkflowViewState.IdRef="While_2" Condition="[not foundElement]">
            <TryCatch DisplayName="Try Catch -  Get Key with OCr" sap2010:WorkflowViewState.IdRef="TryCatch_1">
              <TryCatch.Try>
                <Sequence DisplayName="Try to get key from image + clean data" sap2010:WorkflowViewState.IdRef="Sequence_9">
                  <ui:GetOCRText Text="{x:Null}" WordsInfo="{x:Null}" DisplayName="Get keyName from image" sap2010:WorkflowViewState.IdRef="GetOCRText_1">
                    <ui:GetOCRText.OCREngine>
                      <ActivityFunc x:TypeArguments="sd:Image, scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))">
                        <ActivityFunc.Argument>
                          <DelegateInArgument x:TypeArguments="sd:Image" Name="Image" />
                        </ActivityFunc.Argument>
                        <ui:MicrosoftOCR FilterRegion="{x:Null}" DisplayName="Microsoft OCR" ExtractWords="False" sap2010:WorkflowViewState.IdRef="MicrosoftOCR_1" Image="[Image]" Language="en" Profile="None" Scale="[scale]" Text="[keyName]" />
                      </ActivityFunc>
                    </ui:GetOCRText.OCREngine>
                    <ui:GetOCRText.Target>
                      <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" TimeoutMS="{x:Null}" InformativeScreenshot="a7c7e29fd3593608b95b9996dcd11000" Selector="[&quot;&lt;html title='Automation Challenge' /&gt;&lt;webctrl parentid='supply_tbody' tableRow='&quot;+idex.ToString+&quot;' tag='IMG' /&gt;&quot;]" WaitForReady="INTERACTIVE" />
                    </ui:GetOCRText.Target>
                  </ui:GetOCRText>
                  <Assign DisplayName="Transform keyName to all lowercase" sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[keyName]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[keyName.ToLower]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="An element has been found" sap2010:WorkflowViewState.IdRef="Assign_9">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Boolean">[foundElement]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </TryCatch.Try>
              <TryCatch.Catches>
                <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                  <ActivityAction x:TypeArguments="s:Exception">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                    </ActivityAction.Argument>
                    <If Condition="[scale &lt; 5]" DisplayName="If scale &lt; 5, increment scale; else if pgdn has not been pressed, reset scale to 1, press pgdn, and set pgdn as pressed (True)" sap2010:WorkflowViewState.IdRef="If_2">
                      <If.Then>
                        <Assign sap2010:WorkflowViewState.IdRef="Assign_8">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">[scale]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">[scale + 0.2]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_8">
                          <If Condition="[not _pgdn]" DisplayName="If pgdn not yet pressed" sap2010:WorkflowViewState.IdRef="If_4">
                            <If.Then>
                              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_10">
                                <Assign sap2010:WorkflowViewState.IdRef="Assign_11">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">[scale]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">1</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <ui:SendHotkey DelayBefore="{x:Null}" DelayBetweenKeys="{x:Null}" DelayMS="{x:Null}" Activate="True" ClickBeforeTyping="False" DisplayName="Send Hotkey 'DIV'" EmptyField="False" sap2010:WorkflowViewState.IdRef="SendHotkey_1" Key="pgdn" KeyModifiers="None" SendWindowMessages="False" SpecialKey="True">
                                  <ui:SendHotkey.Target>
                                    <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" TimeoutMS="{x:Null}" InformativeScreenshot="b4e41295687a31baa0132360008da272" Selector="&lt;html title='Automation Challenge' /&gt;&lt;webctrl css-selector='body&amp;gt;div&amp;gt;div&amp;gt;div&amp;gt;div' idx='2' tag='DIV' /&gt;" WaitForReady="INTERACTIVE" />
                                  </ui:SendHotkey.Target>
                                </ui:SendHotkey>
                                <Assign sap2010:WorkflowViewState.IdRef="Assign_14">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Boolean">[_pgdn]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Boolean">[True]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </Sequence>
                            </If.Then>
                          </If>
                        </Sequence>
                      </If.Else>
                    </If>
                  </ActivityAction>
                </Catch>
              </TryCatch.Catches>
            </TryCatch>
          </While>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Transforms keyName into finalKey(standard form)" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="CleanDataSupply.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_string">[keyName]</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="out_keyWord">[finalKey]</OutArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <ui:GetValue ContinueOnError="{x:Null}" DisplayName="Get Value from supply table for current index" sap2010:WorkflowViewState.IdRef="GetValue_1">
            <ui:GetValue.Target>
              <ui:Target ClippingRegion="{x:Null}" Element="{x:Null}" TimeoutMS="{x:Null}" InformativeScreenshot="31c29a4143c63992288c2adf8a529a3a" Selector="[&quot;&lt;html title='Automation Challenge' /&gt;&lt;webctrl id='supply_table' tag='TABLE' /&gt;&lt;webctrl isleaf='1' tableRow='&quot;+idex.ToString+&quot;' tag='TD' /&gt;&quot;]" WaitForReady="INTERACTIVE" />
            </ui:GetValue.Target>
            <ui:GetValue.Value>
              <OutArgument x:TypeArguments="x:String">[valueName]</OutArgument>
            </ui:GetValue.Value>
          </ui:GetValue>
          <Assign DisplayName="Add to dictionary" sap2010:WorkflowViewState.IdRef="Assign_2">
            <Assign.To>
              <OutArgument x:TypeArguments="x:String">[dictValues(finalKey)]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:String">[valueName]</InArgument>
            </Assign.Value>
          </Assign>
          <Assign DisplayName="Increment index" sap2010:WorkflowViewState.IdRef="Assign_3">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">[idex]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">[idex + 1]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </Sequence>
    </While>
    <Assign DisplayName="Copy dictionary to out_dict" sap2010:WorkflowViewState.IdRef="Assign_5">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">[out_dict]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)">[dictValues]</InArgument>
      </Assign.Value>
    </Assign>
    <sads:DebugSymbol.Symbol>d3tDOlxVc2Vyc1xBbmRyZWVhXERlc2t0b3BcUlBBLUxlYWd1ZS1IYWNrYXRob25fUm9ib0R1Y2tzXFJQQS1MZWFndWVfSGFja2F0aG9uX1JvYm9EdWNrcyB2MlxVaVBhdGhCcmllZlxHZXRTdXBwbHlEZXRhaWxzLnhhbWxJSwOFAg4CAQFPTk9zAgEDUjRSNwIBAlcFXg4CAWVfBWYTAgFhZwVuDgIBXW8F+wENAgEJ/AEFgwIOAgEEXC9cMAIBaFkwWTYCAWZkOGRGAgFiYZgBYaMCAgFkbDBsPgIBYGkxaUUCAV5wB/oBEgIBDG9qb3kCAQqBAkqBAlYCAQf+AUv+AVUCAQVxCfkBFAIBDXILeRQCAVl6C4EBFAIBVYIBC9oBEwIBJNsBC+ABIwIBHuEBC+gBGQIBGekBC/ABFAIBE/EBC/gBFAIBDnc3dzwCAVx0OHRGAgFafzd/PAIBWHw4fD8CAVaDAQ3ZARgCASeCAXOCAYcBAgEl3gFL3gFVAgEi3QFI3QFRAgEg2wHSAdsB6AECAR/mATfmAUICARrjAZ4B4wHUAgIBHO4BNu4BQQIBF+sBN+sBTQIBFPYBNfYBPwIBEfMBNvMBPAIBD4UBEaMBHAIBQKsBFdUBGgIBKIYBE5IBIwIBSpMBE5oBHAIBRZsBE6IBHAIBQasBI6sBMwIBKa0BGbQBIgIBO7cBGdMBJAIBK5ABpgGQAbsCAgFTjAEZjAH0AQIBS5gBPpgBTwIBSJUBP5UBSAIBRqABP6ABQwIBRJ0BQJ0BTgIBQrIBRLIBUQIBPq8BRa8BTAIBPLgBG9IBIAIBLIwB5gGMAfEBAgFRjAHXAYwB4AECAU+MAaoBjAGzAQIBTYwBvQGMAcEBAgFMuAEpuAE2AgEtugEf0AEqAgEvuwEhwgEqAgE3wwEhxwExAgE0yAEhzwEqAgEwwAFMwAFNAgE6vQFNvQFUAgE4xQG0AcUBxAICATbDAYYCwwGMAgIBNc0BTc0BUwIBM8oBTsoBVQIBMQ==</sads:DebugSymbol.Symbol>
  </Sequence>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="869,60" />
      <sap2010:ViewStateData Id="GetValue_2" sap:VirtualizedContainerService.HintSize="869,106" />
      <sap2010:ViewStateData Id="Assign_6" sap:VirtualizedContainerService.HintSize="869,60" />
      <sap2010:ViewStateData Id="Assign_10" sap:VirtualizedContainerService.HintSize="799,60" />
      <sap2010:ViewStateData Id="Assign_13" sap:VirtualizedContainerService.HintSize="799,60" />
      <sap2010:ViewStateData Id="MicrosoftOCR_1" sap:VirtualizedContainerService.HintSize="200,22" />
      <sap2010:ViewStateData Id="GetOCRText_1" sap:VirtualizedContainerService.HintSize="314,168" />
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Assign_9" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Sequence_9" sap:VirtualizedContainerService.HintSize="336,492">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_8" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_11" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="SendHotkey_1" sap:VirtualizedContainerService.HintSize="314,154" />
      <sap2010:ViewStateData Id="Assign_14" sap:VirtualizedContainerService.HintSize="314,60" />
      <sap2010:ViewStateData Id="Sequence_10" sap:VirtualizedContainerService.HintSize="336,478">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="464,626" />
      <sap2010:ViewStateData Id="Sequence_8" sap:VirtualizedContainerService.HintSize="486,750">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_2" sap:VirtualizedContainerService.HintSize="753,898" />
      <sap2010:ViewStateData Id="Catch`1_1" sap:VirtualizedContainerService.HintSize="759,967">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryCatch_1" sap:VirtualizedContainerService.HintSize="773,1129" />
      <sap2010:ViewStateData Id="While_2" sap:VirtualizedContainerService.HintSize="799,1287" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_2" sap:VirtualizedContainerService.HintSize="799,87" />
      <sap2010:ViewStateData Id="GetValue_1" sap:VirtualizedContainerService.HintSize="799,106" />
      <sap2010:ViewStateData Id="Assign_2" sap:VirtualizedContainerService.HintSize="799,60" />
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="799,60" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="821,2084">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="843,2208">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="While_1" sap:VirtualizedContainerService.HintSize="869,2366" />
      <sap2010:ViewStateData Id="Assign_5" sap:VirtualizedContainerService.HintSize="869,60" />
      <sap2010:ViewStateData Id="Sequence_2" sap:VirtualizedContainerService.HintSize="891,3023">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="GetSupplyDemand_1" sap:VirtualizedContainerService.HintSize="931,3103" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>